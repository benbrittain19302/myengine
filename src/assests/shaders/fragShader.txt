#version 430 core
// This is the fragment shader
// The program in this file will be run separately for each fragment (pixel) that is drawn

// These are the per-fragment inputs
// They must match with the outputs of the vertex shader
in vec3 eyeSpaceNormalV;
in vec3 eyeSpaceLightPosV;
in vec3 eyeSpaceVertPosV;
in vec2 texCoord;
in vec4 lightSpaceVertPos;

// These variables will be the same for every vertex in the model
// They are mostly material and light properties
// We provide default values in case the program doesn't set them
uniform vec3 lightColour = {1,1,1};
uniform vec3 emissiveColour = {0,0,0};
uniform vec3 ambientColour  = {0.1f,0.1f,0.2f};
uniform vec3 diffuseColour  = {0.8f,0.1f,0.1f};
uniform vec3 specularColour = {0.0f,1.0f,0.0f};
uniform float shininess     = 50.0f;
uniform float alpha         = 1.0f;


// This is another input to allow us to access a texture
uniform sampler2D tex1;

//shadow texture input
uniform sampler2D shadowTex;

// This is the output, it is the fragment's (pixel's) colour
out vec4 fragColour;

//This function is from https://learnopengl.com/Advanced-Lighting/Shadows/Shadow-Mapping
float ShadowCalculation(vec4 fragPosLightSpace, vec3 lightDir, vec3 normal)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowTex, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // check whether current frag pos is in shadow
	
	float bias = max(0.0065 * (1.0 - dot(normal, lightDir)), 0.0005);
	//float bias = 0.005;

	//Simple PCF Function
    float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadowTex, 0);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
		  float pcfDepth = texture(shadowTex, projCoords.xy + vec2(x, y) * texelSize).r; 
		 shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	shadow /= 9.0;
			
    //float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;

    return shadow;
}  

// The actual program, which will run on the graphics card
void main()
{
	// This is the direction from the fragment to the light, in eye-space
	vec3 lightDir = normalize( eyeSpaceLightPosV - eyeSpaceVertPosV );
	// Re-normalise the normal just in case
	vec3 normal = normalize( eyeSpaceNormalV );
	vec3 eyeDir = normalize( -eyeSpaceVertPosV );
	vec3 halfVec = normalize( eyeDir + lightDir );
	
	// Retrieve colour from texture
	vec3 texCol = vec3(texture(tex1,vec2(texCoord.x,1-texCoord.y)));

		// This is where you need to write your code!
		//vec3 diffuse = diffuseColour * max(0,dot(normal,lightDir));
		vec3 diffuse = texCol * ( ambientColour + max(0,dot(normal,lightDir)) );
		
		
		// This is where you need to write your code!
		vec3 specular = specularColour * lightColour * vec3( dot( normal, lightDir ) > 0 ) * pow( max( dot( normal, halfVec ), 0 ), shininess );
		
		//calculate shadow
		float shadow = ShadowCalculation(lightSpaceVertPos, lightDir, normal);
		vec3 lighting = (ambientColour + (1.0 - shadow) * (diffuse + specular)) * texCol;

		fragColour = vec4(lighting, 1.0);

		// The final output colour is the emissive + ambient + diffuse + specular
		//fragColour = vec4(texture(shadowTex,vec2(texCoord.x,1-texCoord.y)).r);//vec4( emissiveColour + diffuse + specular, alpha);
}
